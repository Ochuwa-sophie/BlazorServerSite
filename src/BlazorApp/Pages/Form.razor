@page "/form"
@using BlazorApp

<h1>Contact Me</h1>

<EditForm Model="BlogPostModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    
    <div class="row mt-4">
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="BlogPostModel.Title" class="form-control"/>
    </div>
    <div class="row mt-4">
        <label for="slug">Slug</label>
        <InputText id="slug" @bind-Value="BlogPostModel.Slug" class="form-control"/>
    </div>
    <div class="row mt-4">
        <InputTextArea @bind-Value="BlogPostModel.Content" class="form-control" rows="10"/>
    </div>
    <div class="row mt-4">
        <button type="submit" class="btn btn-primary">Publish</button>
    </div>
    <div class="row mt-4">
        <ValidationSummary />
    </div>

</EditForm>

@code {
    protected BlogPost BlogPostModel { get; set; } = new BlogPost();

    protected void HandleValidSubmit()
    {
        Console.WriteLine("Valid submit!");
        Console.WriteLine("Your title: " + BlogPostModel.Title);
        Console.WriteLine("Your slug: " + BlogPostModel.Slug);
        Console.WriteLine("Your content: " + BlogPostModel.Content);
    }
}

@* @page "/fetchdata"

@using BlazorApp.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
} *@
